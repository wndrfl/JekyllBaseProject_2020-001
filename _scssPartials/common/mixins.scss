// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒
// ▒ Mixins
// ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

//
// translate3d --- Force hardware acceleration
// $usage       @include translate3d(0);
@mixin translate3d($x:0, $y: 0, $z: 0) {
  -webkit-transform: translate3d($x, $y, $z);
  -moz-transform: translate3d($x, $y, $z);
  -ms-transform: translate3d($x, $y, $z);
  -o-transform: translate3d($x, $y, $z);
  transform: translate3d($x, $y, $z);
}

// transitionMultiple --- Handle multiple CSS3 transitions in a single statement
// @usage	.transitionMultiple(width .33s linear 0s, height .2s linear 0s);
// /* property name | duration | timing function | delay */
@mixin transitionMultiple($arguments...) {
  -webkit-transition: $arguments;
  -moz-transition: $arguments;
  -ms-transition: $arguments;
  -o-transition: $arguments;
  transition: $arguments;
}

// setPseudoClasses --- Button states
// @usage	.setPseudoClasses($brown_1, darkolivegreen, rgba(1, 22, 36, 0.4), rgba(1, 22, 36, 0.99));
@mixin setPseudoClasses($def_bkgd:darkgray, $def_color: #888888, $hover_bkgd: gray, $hover_color: black, $time_bkgd:.3s, $time_foreground:.3s) {

  color: $def_color;
  background: $def_bkgd;

  // Keep order: LVHA-order: :link — :visited — :hover — :active
  &:link, &:visited {
    color: $def_color;
    background: $def_bkgd;
  }

  &.disabled, &[disabled] {
    color: $def_color;
    background: $def_bkgd;
  }

  &:focus{
    color: $hover_color;
    background: $hover_bkgd;
    // /* property name | duration | timing function | delay */
    @include transitionMultiple(background-color $time_bkgd ease-out, color $time_foreground linear);
  }

  &:hover {
    color: $hover_color;
    background: $hover_bkgd;
    @include transitionMultiple(background-color $time_bkgd ease-out, color $time_foreground linear);
  }

  &:active {
    color: $hover_color;
    background: $hover_bkgd;
  }

}

// Scale
@mixin scale($sx:0, $sy:0) {
  -webkit-transform: scale($sx, $sy);
  -moz-transform: scale($sx, $sy);
  -ms-transform: scale($sx, $sy);
  -o-transform: scale($sx, $sy);
  transform: scale($sx, $sy);
}

// Border Radius
@mixin borderRadius($radius: 5px) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

// Opacity
@mixin opacity($opacity:1) {
  -moz-opacity: $opacity;
  -ms-opacity: $opacity;
  -o-opacity: $opacity;
  -webkit-opacity: $opacity;
  opacity: $opacity;
}

// Box Shadow
// @usage	@include box-shadow(1px,1px,1px,0, #fff, true);
@mixin box-shadow($top, $left, $blur, $size, $color, $inset: false) {
  @if $inset {
    -webkit-box-shadow: inset $top $left $blur $size $color;
    -moz-box-shadow: inset $top $left $blur $size $color;
    box-shadow: inset $top $left $blur $size $color;
  } @else {
    -webkit-box-shadow: $top $left $blur $size $color;
    -moz-box-shadow: $top $left $blur $size $color;
    box-shadow: $top $left $blur $size $color;
  }
}

// flex-container-display --- This defines a flex container
@mixin flex-container-display() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

// flex-order --- This defines flow of items in a flex container.
// You may put the values in any order (e.g. row wrap || wrap row || nowrap column || row nowrap…).
// flex-flow: <‘flex-direction’> || <‘flex-wrap’>
// Default: row nowrap
// @usage	@include flex-container-flow(nowrap column);
@mixin flex-container-flow($vals) {
  -webkit-flex-flow: $vals;
  flex-flow: $vals;
}

// Flex --- This property is the shorthand for the flex-grow, flex-shrink and flex-basis properties. Among other values it also can be set to auto (1 1 auto) and none (0 0 auto).
// Values: none | auto | [  ? ||  ]
// Default: 0 1 auto
// @usage	@include flex(1 0 auto);
@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex: $values;
  -webkit-flex: $values;
  -ms-flex: $values;
  flex: $values;
}

// flex-items-order --- This defines a flex items order within the flex container.
// Default: 0
// @usage	@include flex-items-order(1);
@mixin flex-items-order($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}

// truncate --- Use an ellipsis when truncating a single line of copy.
// @usage	@include truncate(50px);
@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin background-img-sprite($img, $x, $y, $size) {
  background-image: url($img);
  background-repeat: no-repeat;
  background-position-x: $x;
  background-position-y: $y;
  background-position: $x $y;
  background-size: $size;
}

// Linear Gradient
@mixin linearGradient($stop1:0, $color1:#eeff99, $stop2:50%, $color2:#ff3300, $stop3:100%, $color3:#ccc) {
  background-color: $color2;
  background: -webkit-gradient(linear, left bottom, left top, color-stop($stop1, $color1), color-stop($stop2, $color2), color-stop($stop3, $color3));
  background: -moz-linear-gradient(center bottom, $color1 $stop1, $color2 $stop2, $color3 $stop3);
  background: -ms-linear-gradient(center bottom, $color1 $stop1, $color2 $stop2, $color3 $stop3);
  background: -o-linear-gradient(center bottom, $color1 $stop1, $color2 $stop2, $color3 $stop3);
  background: linear-gradient(center bottom, $color1 $stop1, $color2 $stop2, $color3 $stop3);
  -pie-background: linear-gradient($color1, $color2, $color3);
}

@mixin vertical-align($position: relative) {
  position: $position;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}

/**
 * user-select: auto|none|text|all;
 */
@mixin user-select($val: none) {
  -webkit-user-select: $val;
  -moz-user-select: $val;
  -ms-user-select: $val;
  user-select: $val;
}

@mixin animation-keyframes ($animation_name) {
  @-webkit-keyframes #{$animation_name} {
    @content;
  }

  @-moz-keyframes #{$animation_name} {
    @content;
  }

  @-o-keyframes #{$animation_name} {
    @content;
  }

  @keyframes #{$animation_name} {
    @content;
  }
}

/*
<single-animation>#
where
<single-animation> = <time> || <timing-function> || <time> || <single-animation-iteration-count> || <single-animation-direction> || <single-animation-fill-mode> || <single-animation-play-state> || [ none | <keyframes-name> ]

where
<timing-function> = linear | <cubic-bezier-timing-function> | <step-timing-function>
<single-animation-iteration-count> = infinite | <number>
<single-animation-direction> = normal | reverse | alternate | alternate-reverse
<single-animation-fill-mode> = none | forwards | backwards | both
<single-animation-play-state> = running | paused
<keyframes-name> = <custom-ident> | <string>

where
<cubic-bezier-timing-function> = ease | ease-in | ease-out | ease-in-out | cubic-bezier(<number>, <number>, <number>, <number>)
<step-timing-function> = step-start | step-end | steps(<integer>[, <step-position>]?)

where
<step-position> = jump-start | jump-end | jump-none | jump-both | start | end
 */

@mixin animation ($delay, $duration, $animation, $direction: normal, $fillmode: forwards, $iteration-count: infinite, $easing: linear) {
  -webkit-animation-delay: $delay;
  -webkit-animation-duration: $duration;
  -webkit-animation-name: $animation;
  -webkit-animation-fill-mode: $fillmode;
  -webkit-animation-direction: $direction;
  -webkit-animation-iteration-count: $iteration-count;
  -webkit-animation-timing-function: $easing;

  -moz-animation-delay: $delay;
  -moz-animation-duration: $duration;
  -moz-animation-name: $animation;
  -moz-animation-fill-mode: $fillmode;
  -moz-animation-direction: $direction;
  -moz-animation-iteration-count: $iteration-count;
  -moz-animation-timing-function: $easing;

  animation-delay: $delay;
  animation-duration: $duration;
  animation-name: $animation;
  animation-fill-mode: $fillmode;
  animation-direction: $direction;
  animation-iteration-count: $iteration-count;
  animation-timing-function: $easing;
}